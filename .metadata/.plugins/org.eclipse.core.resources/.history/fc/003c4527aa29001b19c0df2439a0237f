package StreamAPI;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

import StreamAPI.Order.Type;

/*
 * Question 1 :

	define a class "Order" with:

	enum Type
	{
		BUY,SELL;
	}
	private int quantity;
	private double price;
	private Type type;

	
	define setter and getter methods for all the fields.

	create 5 objects of this class and stored them inside list.

	using stream api:

	1) count how many orders are for "SELL"

		hint:- use "filter" method of stream to check whether type is SELL and "count" method to count.

	2) calculate sum of all the prices

		hint:- use "mapToDouble" method of stream to convert price of each and every object and "sum" method to calculate total of all the prices.

	3) calculate sum of all the quantities.

		hint:- use "mapToInt" method of stream to convert qty of each and every object and "sum" method to calculate total of all the quantities.

 */


class Order
{
	enum Type
	{
		BUY,SELL;
	}
	private int quantity;
	private double price;
	private Type type;
	public int getQuantity() {
		return quantity;
	}
	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}
	public double getPrice() {
		return price;
	}
	public void setPrice(double price) {
		this.price = price;
	}
	public Type getType() {
		return type;
	}
	public void setType(Type type) {
		this.type = type;
	}
	
}
public class Assignment1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<Order> myList = new ArrayList<>();
		Order o = new Order();
		Scanner sc = new Scanner(System.in);
		int q,p = 0;
		String t;
		for(int i=0;i<1;i++)
		{
			System.out.println("Enter Quatity of Product "+(i+1));
			q=sc.nextInt();
			System.out.println("Enter Price of Product "+(i+1));
			q=sc.nextInt();
			System.out.println("Enter Type of Product "+(i+1));
			t=sc.next();
			o.setPrice(p);
			o.setQuantity(q);
			if(t.equalsIgnoreCase("buy"))
			{
				o.setType(Type.BUY);
			}
			else
			{
				o.setType(Type.SELL);
			}
			myList.add(o);
		}
		System.out.println(myList.stream().filter((s)-> s.getType()== Type.BUY).count());
		Double sum=myList.stream().mapToDouble(s->s.getPrice()).sum();
		System.out.println(sum);	
	}

	
}
